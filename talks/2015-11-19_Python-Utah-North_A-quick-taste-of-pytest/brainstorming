# Testing Strategies in Python


---

# Resources

## Sites

https://wiki.python.org/moin/PythonTestingToolsTaxonomy
http://pythontesting.net Blog dedicated to python testing
[http://pyvideo.org/search?models=videos.video&q=testing](pyvideo.org)

## People

Holger Krekel - py.test guy, located in Germany

python testing mailing list
    http://lists.idyll.org/listinfo/testing-in-python
    archives for the mailing lists


# Tools

## Debuggers

* pdb
* gdb

## continuous integration

Programs that run your code.
Travis-CI for github


## formal logic
        proofs and disproofs
        B should change as A changes; but changing A is not changing B. Try something radical: change A to 
        (only if A then B; not B therefore not A; BUT I see A right there!)
        (so you try another tack: remove A. If B is still showing up, then 

    test runners
        py.test
        nosetests
        pyunit

    Mocking frameworks
        fudge - 
            http://farmdev.com/projects/fudge/
            https://bitbucket.org/kumar303/fudge/issues/
        mock (in Python 3 part of the stdlib)


Concepts and Definitions
    
    Coupling
        python's import system and "from X import Y" vs "from X import *"

Attitudes

    Behavior driven development BDD
        tries to get closer 

Use Cases
    
    adding tests to an existing codebase
    reverse engineering
        - have a codebase, need to imitate some functionality to replace a piece
            example: have a network service that is messily coded. Want to re-code it: so I pull up the object, trace all the calls, then use that insted of hitting the network each time


Information Perspective: 
    what does this test tell me about my code?
    tests do not improve the quality of the code; they just help the team think about the code, and verify or disprove things. (Of course the tests must be solid too: so what makes tests better than another piece of code? 
        You can execute them in a way that lets you focus on the piece of code and stretch and pull it in all different ways. This might be tough with conventional code.



Ways of interpreting a program:
    vanilla: run the code as it's written `python hello.py`
    interpreter: run the code, then start up a cli to run additional commands. `python -i hello.py`
    tracing: (debugger or otherwise) `python -m pdb hello.py`
    documenting: `python -m pydoc hello` (Note that there's no .py on this one: it's loading the module)
    profiling: timing the various pieces of executing code, as you are running it. Provides information about aspects of your code in time. `python -m profile hello.py`
    test runner: `python -m unittest hello`
        no tests. hopping along on one leg.

    these are all kind of the "batteries included"
    (image of duracell -> toy remote control car; vs image of new batteries and a drone) pip has the better batteries
    [table of equivalents: 
        pypy or cpython for vanilla
        interpreter: ipython or your IDE
        tracing: rdebug
        documenting: sphinx
        profiling: ?
        test runner: py.test

        find pieces of code, isolate them and run 


Quotes
        "It's more fun to write tests on a weekday than it is to find bugs on a weekend" -Jacob Kaplan Moss
        "Code without tests is broken by design" -Jacob Kaplan Moss
        "A most important, but also most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language this influence is, whether we like it or not, an influence on our thinking habits.... A programming language is a tool that has profound influence on our thinking habits."  - E. Dijkstra (http://www.cs.cmu.edu/~pattis/quotations.html)
        "We think only through the medium of words. Languages are true analytical methods. Algebra, which is adapted to its purpose in every species of expression, in the most simple, most exact, and best manner possible, is at the same time a language and an analytical method. The art of reasoning is nothing more than a language well arranged."  - A. Lavoisier (http://www.cs.cmu.edu/~pattis/quotations.html)
        "The real value of learning to program can only be understood if we look at learning to program as an exercise of the intellect, as a kind of modern-day Latin that we learn to sharpen our minds."  - R. Schank (in "The Cognitive Computer) (http://www.cs.cmu.edu/~pattis/quotations.html)

        (a programming language is a tool to reason about the world)
        levels of knowledge: what you know, what you don't know
        it's not what I know that gets me; it's what I know that ain't so
            (often a source of mental confusion and pain: you realize that how you're thinking about something is contradictory; need to figure out how to identify and eliminate false premise. studying a little basic logic proofs and disproof here will help)

Benefits of tests
    if the tests 
    tests as documentation:
        if I'm not sure how to plug into a library, tests can help me know where the interface is; this is a little like an unfamiliar vehicle: 
    tests help you to reason about the code: development moves faster
    tests are a special kind of code; but fundamental rules apply: 
        keep it dry
        decoupled
    tests help you keep code decoupled: if it's tough to test, often a sign that your code is too coupled
            

Comparisons
    vs Pylint
        PyLint tells you things about your source code that are legitimate, but may get in the way of understanding the program. 
        Likewise tests help you figure out what you're *not* thinking about but should have
            I know how to drive a car, but turns out I just moved to europe and the only thing that gets through is a motorbike.
            "where's the gas cap?"
            where's the oil?
            how do I turn it on?
            how do I steer it?
            what do I have to watch out for? (what are the weaknesses)  

            Having tests is like
Images
    one legged man in a race
        works ok if you're playing around with the kids
        but it's no good in most other places you might want to run 
        (battle, football, ultimate frisbee, park with kids, 
        or even walk (black friday sales); hiking a mountain
    one legged man with a bionic leg


Personas
    engineers: industry
    embedded
    data
    web
    business applications; marketing and sales; services
    communications/soft real time
    scientists
    
    # qualities
        systems administration
        discrete math aka computer science
        people skills
        knowledge of architecture
        reliability



PEOPLE AND RESOURCES
    pythontesting.net
        why most unit tests are a waste of time
